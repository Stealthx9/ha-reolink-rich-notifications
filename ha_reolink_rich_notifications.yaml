blueprint:
  name: Reolink Rich Notifications
  description: >
    Send Reolink rich notifications to an Android device.

    Documentation: https://github.com/jterrace/ha-reolink-rich-notifications

  domain: automation
  input:
    notify_device:
      name: Devices to Notify
      description: These mobile devices will receive a notification when alerts are triggered.
      default: []
      selector:
        device:
          integration: mobile_app
          multiple: true

    trigger_entities:
      name: Trigger Sensors
      description: These Reolink sensors will be monitored to determine when to send an alert.
      selector:
        entity:
          multiple: true
          filter:
            - integration: reolink
              domain: binary_sensor

    retrigger_delay:
      name: Retrigger Delay
      description: Time to wait before triggering the same camera again.
      default:
        hours: 0
        minutes: 0
        seconds: 20
      selector:
        duration:

    # Action 1

    action_1_title:
      name: First action name
      description: Name of the first button
      default: ""

    action_1_uri:
      name: URI for action 1 (Optional)
      description: Optional URI for the first action
      default: ""

    first_action:
      name: Action 1
      description: "Action to run when the first action is clicked"
      default: []
      selector:
        action:

    # Action 2

    action_2_title:
      name: Second action name
      description: Name of the second button
      default: ""

    action_2_uri:
      name: URI for action 1 (Optional)
      description: Optional URI for the second action
      default: ""

    second_action:
      name: Action 2
      description: Action to run when the second action is clicked"
      default: []
      selector:
        action:

    # Action 3

    action_3_title:
      name: Third action name
      description: Name of the third button
      default: ""

    action_3_uri:
      name: URI for action 3 (Optional)
      description: Optional URI for the third action
      default: ""

    third_action:
      name: Action 3
      description: "Action to run when the third action is clicked"
      default: []
      selector:
        action:

mode: restart
max_exceeded: silent

variables:
  notify_device: !input notify_device
  trigger_entities: !input trigger_entities
  retrigger_delay: !input retrigger_delay
  action_1_title: !input action_1_title
  action_1_uri: !input action_1_uri
  first_action: !input first_action
  action_2_title: !input action_2_title
  action_2_uri: !input action_2_uri
  second_action: !input second_action
  action_3_title: !input action_3_title
  action_3_uri: !input action_3_uri
  third_action: !input third_action

trigger:
  platform: state
  entity_id: !input trigger_entities
  from: "off"
  to: "on"
  variables:
    image_file: "reolink_rich_notifications/{{ trigger.to_state.last_updated | as_timestamp | timestamp_custom('%Y-%m-%d_%H-%M-%S') }}_{{ trigger.to_state.context.id }}.jpg"

action:
  - variables:
      camera_entities: "{{ device_entities(device_id(trigger.entity_id)) | select('match', '^camera\\.') | list }}"
      camera_to_snapshot: >
        {{
        (camera_entities | select('match', '.*_snapshots_fluent$') | first) or
        (camera_entities | select('match', '.*_snapshots_clear$') | first) or
        (camera_entities | select('match', '.*_fluent$') | first) or
        (camera_entities | first)
        }}
      should_skip_notification: >
        {%
          set other_sensor_times =
            trigger_entities |
            select('ne', trigger.entity_id) |
            select('is_device_attr', 'id', device_id(trigger.entity_id)) |
            expand |
            map(attribute = 'last_updated') |
            list
            + [trigger.from_state.last_updated]
        %}
        {{ trigger.to_state.last_updated - other_sensor_times|max < timedelta(**retrigger_delay) }}

  - if:
      - condition: template
        value_template: "{{ should_skip_notification }}"
    then:
      - stop: "Skipping notification for being too soon."

  # Send notification without image first.
  - repeat:
      for_each: "{{ notify_device }}"
      sequence:
        - service: "notify.mobile_app_{{ device_attr(repeat.item, 'name') | slugify }}"
          data:
            title: "{{ trigger.from_state.attributes.friendly_name }}"
            message: ""
            data:
              tag: "{{ trigger.to_state.context.id }}"
              ttl: 0
              priority: high
              url: "app://com.mcu.reolink"
              clickAction: "app://com.mcu.reolink"

  # Create camera snapshot
  - service: camera.snapshot
    data_template:
      entity_id: "{{ camera_to_snapshot }}"
      filename: "/media/{{ image_file }}"

  # Re-send notification with image data.
  - repeat:
      for_each: "{{ notify_device }}"
      sequence:
        - service: "notify.mobile_app_{{ device_attr(repeat.item, 'name') | slugify }}"
          data:
            title: "{{ trigger.from_state.attributes.friendly_name }}"
            message: ""
            data:
              tag: "{{ trigger.to_state.context.id }}"
              image: "/media/local/{{ image_file }}"
              ttl: 0
              priority: high
              url: "app://com.mcu.reolink"
              clickAction: "app://com.mcu.reolink"
              actions: >
                {% set titles = [action_1_title, action_2_title, action_3_title] %}
                {% set uris = [action_1_uri, action_2_uri, action_3_uri] %}
                {% set actions = namespace(data = []) %}

                {% for title in titles %}
                  {% if title|length %}
                    {% set uri = uris[loop.index - 1] %}
                    {% set action_name = "action" + loop.index|string %}
                    {% set action = {
                      "action": "URI" if uri|length else action_name,
                      "title": title,
                      "uri": uri 
                      }
                    %}
                    {% set actions.data = actions.data + [action] %}
                  {% endif %}
                {% endfor %}
                {{ actions.data }}

  # Wait for the user to select an action
  - wait_for_trigger:
      platform: event
      event_type: mobile_app_notification_action

  # Do the action that the user selected
  - choose:
      - conditions: "{{ wait.trigger.event.data.action == 'action1' }}"
        sequence: !input first_action
      - conditions: "{{ wait.trigger.event.data.action == 'action2' }}"
        sequence: !input second_action
      - conditions: "{{ wait.trigger.event.data.action == 'action3' }}"
        sequence: !input third_action
