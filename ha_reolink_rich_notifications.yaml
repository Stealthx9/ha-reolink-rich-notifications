blueprint:
  name: Reolink Rich Notifications
  description: >
    Send Reolink rich notifications to an Android device.

    Adapted from:
     - Forked from McDAlexander (https://gist.github.com/McDAlexander/56eb3f2e421e283460b3d641fd002ea8)
     - Customized from vorion's blueprint.

  domain: automation
  input:
    notify_device:
      name: Devices to notify
      default: []
      selector:
        device:
          integration: mobile_app
          multiple: true

    trigger_entity:
      name: Trigger entity
      description: Send the notification when this boolean turns on
      selector:
        entity:
          filter:
            - integration: reolink
              domain: binary_sensor

    snapshot_cam:
      name: Camera for Snapshot
      description: The camera from wich take photo for notification.
      selector:
        entity:
          filter:
            - integration: reolink
              domain: camera

    notification_title:
      name: Notification title (Optional)
      description: The title of the notification
      default: ""

    notification_message:
      name: Notification message (Optional)
      description: The message of the notification
      default: ""

    # Action 1

    action_1_title:
      name: First action name
      description: Name of the first button
      default: ""

    action_1_uri:
      name: URI for action 1 (Optional)
      description: Optional URI for the first action
      default: ""

    first_action:
      name: Action 1
      description: "Action to run when the first action is clicked"
      default: []
      selector:
        action:

    # Action 2

    action_2_title:
      name: Second action name
      description: Name of the second button
      default: ""

    action_2_uri:
      name: URI for action 1 (Optional)
      description: Optional URI for the second action
      default: ""

    second_action:
      name: Action 2
      description: Action to run when the second action is clicked"
      default: []
      selector:
        action:

    # Action 3

    action_3_title:
      name: Third action name
      description: Name of the third button
      default: ""

    action_3_uri:
      name: URI for action 3 (Optional)
      description: Optional URI for the third action
      default: ""

    third_action:
      name: Action 3
      description: "Action to run when the third action is clicked"
      default: []
      selector:
        action:

mode: restart
max_exceeded: silent

variables:
  notify_device: !input notify_device
  trigger_entity: !input trigger_entity
  snapshot_cam: !input snapshot_cam
  notification_title: !input notification_title
  notification_message: !input notification_message
  action_1_title: !input action_1_title
  action_1_uri: !input action_1_uri
  first_action: !input first_action
  action_2_title: !input action_2_title
  action_2_uri: !input action_2_uri
  second_action: !input second_action
  action_3_title: !input action_3_title
  action_3_uri: !input action_3_uri
  third_action: !input third_action
  image_file: "/media/local/reolink_rich_notifications/{{ expand(trigger_entity)[0].last_changed | as_timestamp  | timestamp_custom('%Y-%m-%d_%H-%M-%S') }}.jpg"

trigger:
  platform: state
  entity_id: !input trigger_entity
  from: "off"
  to: "on"

action:
  # Create camera snapshot
  - data_template:
      entity_id: !input snapshot_cam
      filename: "{{ image_file }}"

    service: camera.snapshot

  # Send actionable notification
  - repeat:
    for_each: !input notify_device
    sequence:
      - service: "notify.mobile_app_{{ device_attr(repeat.item, 'name') | slugify }}"
        data:
          title: "{{ notification_title }}"
          message: "{{ notification_message }}"
          data:
            tag: "{{ notification_title }}"
            image: "{{ image_file }}"
            ttl: 0
            priority: high
            actions: >
              {% set titles = [action_1_title, action_2_title, action_3_title] %}
              {% set uris = [action_1_uri, action_2_uri, action_3_uri] %}
              {% set actions = namespace(data = []) %}

              {% for title in titles %}
                {% if title|length %}
                  {% set uri = uris[loop.index - 1] %}
                  {% set action_name = "action" + loop.index|string %}
                  {% set action = {
                    "action": "URI" if uri|length else action_name,
                    "title": title,
                    "uri": uri 
                    }
                  %}
                  {% set actions.data = actions.data + [action] %}
                {% endif %}
              {% endfor %}
              {{ actions.data }}

  # Wait for the user to select an action
  - wait_for_trigger:
      platform: event
      event_type: mobile_app_notification_action

  # Do the action that the user selected
  - choose:
      - conditions: "{{ wait.trigger.event.data.action == 'action1' }}"
        sequence: !input first_action
      - conditions: "{{ wait.trigger.event.data.action == 'action2' }}"
        sequence: !input second_action
      - conditions: "{{ wait.trigger.event.data.action == 'action3' }}"
        sequence: !input third_action
